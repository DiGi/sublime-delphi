<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pas</string>
		<string>dpr</string>
		<string>inc</string>
		<string>lpr</string>
		<string>p</string>
		<string>pp</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\b(?i:(function|package|procedure|try|type))\b</string>
	<key>foldingStopMarker</key>
	<string>\b(?i:(end))\b</string>
	<key>keyEquivalent</key>
	<string>^~P</string>
	<key>name</key>
	<string>Delphi</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(absolute|abstract|all|array|as|asm|assembler|attribute|begin|bindable|case|class|const|constructor|default|destructor|delay|div|do|downto|else|end|except|export|exports|external|far|file|finalization|finally|for|forward|goto|helper|if|inc|implementation|import|in|index|inherited|initialization|inline|interface|interrupt|is|label|library|mod|module|name|near|nil|not|object|of|only|operator|overload|override|otherwise|out|packed|pow|private|property|protected|public|published|qualified|record|reintroduce|repeat|resident|restricted|segment|set|shr|stdcall|stored|then|to|try|type|unit|until|uses|var|view|virtual|while|with|write|writeln))\b</string>
			<key>name</key>
			<string>keyword.control.delphi</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(and|not|or|shl|sh|xor))\b</string>
			<key>name</key>
			<string>keyword.operator.delphi</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(true|false|nil))\b</string>
			<key>name</key>
			<string>constant.language.delphi</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.prototype.delphi</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.prototype.delphi</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(function|procedure))\b\s+(\w+(\.\w+)?)(\(.*?\))?;\s*(?=(?i:attribute|forward|external))</string>
			<key>name</key>
			<string>meta.function.prototype.delphi</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#blockComments</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.delphi</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.delphi</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(function|procedure|program))\b\s+(\w+(\.\w+)?)</string>
			<key>name</key>
			<string>meta.function.delphi</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.delphi</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.delphi</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(Shortint|Integer|Longint|Byte|Word|Boolean|WordBool|LongBool|ByteBool|Real|Single|Double|Extended|Comp|String|Char|Length|Upcase|textbackground|textcolor|gotoxy|crt|clrscr|readkey|read|readln))\b</string>
			<key>name</key>
			<string>meta.function.delphi</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?&lt;![#])((0(x|X)[0-9a-fA-F]*)|((\d+\.?[0-9]+)|(\.[0-9]+))((e|E)(\+|-)?\d+)?)\b</string>
			<key>name</key>
			<string>constant.numeric.delphi</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>blockComments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{(?!\$)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.delphi</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>comment.block.braces.delphi</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.delphi</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*\)</string>
					<key>name</key>
					<string>comment.block.delphi</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#lineComments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#blockComments</string>
				</dict>
			</array>
		</dict>
		<key>lineComments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.delphi</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.delphi</string>
				</dict>
			</array>
		</dict>
		<key>preprocessor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{\$</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.delphi</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>constant.other.preprocessor.source.delphi</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.delphi</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'(?!')</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.delphi</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.delphi</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>''</string>
							<key>name</key>
							<string>constant.character.escape.apostrophe.delphi</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\W#((0(x|X)[0-9a-fA-F]+)|(\d+))\b</string>
					<key>name</key>
					<string>string.character.delphi</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.delphi</string>
	<key>uuid</key>
	<string>533ce636-d422-4e96-b363-f6a710dbb1a3</string>
</dict>
</plist>

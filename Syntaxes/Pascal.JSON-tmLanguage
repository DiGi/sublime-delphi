{
    "fileTypes": [
        "pas", 
        "dpr"
    ], 
    "foldingStartMarker": "\\b(?i:(function|package|procedure|try|type))\\b", 
    "foldingStopMarker": "\\b(?i:(end))\\b", 
    "keyEquivalent": "^~P", 
    "name": "Delphi", 

    "repository": {

        "comments": {
            "patterns": [
                { "include": "#lineComments" },
                { "include": "#blockComments" }
            ]
        },

        "lineComments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.delphi",
                    "match": "(//).*$\\n?", 
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.delphi"
                        }
                    } 
                }
            ]
        },

        "blockComments": {
            "patterns": [
                {
                    "name": "comment.block.delphi.braces",
                    "begin": "\\{", 
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.delphi"
                        }
                    }, 
                    "end": "\\}"
                },

                {
                    "name": "comment.block.delphi.block",
                    "begin": "\\(\\*", 
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.delphi"
                        }
                    }, 
                    "end": "\\*\\)"
                }
            ] 
        },

        "strings": {
            "patterns": [
                {
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.delphi"
                        }
                    }, 
                    "end": "'", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.delphi"
                        }
                    },
                    "name": "string.quoted.single.delphi", 
                    "patterns": [
                        {
                            "name": "constant.character.escape.apostrophe.delphi",
                            "match": "''"
                        }
                    ]
                }
            ]
        }

    },


    "patterns": [
        { "include": "#comments" },

        { "include": "#strings" },

        {
            "name": "keyword.control.delphi",
            "match": "\\b(?i:(absolute|abstract|all|and|and_then|array|as|asm|assembler|attribute|begin|bindable|case|class|const|constructor|destructor|delay|div|do|downto|else|end|except|export|exports|external|far|file|finalization|finally|for|forward|goto|helper|if|inc|implementation|import|in|index|inherited|initialization|inline|interface|interrupt|is|label|library|mod|module|name|near|nil|not|object|of|only|operator|overload|override|or|or_else|otherwise|out|packed|pow|private|property|protected|public|published|qualified|record|reintroduce|repeat|resident|restricted|segment|set|shl|shr|stdcall|then|to|try|type|unit|until|uses|value|var|view|virtual|while|with|xor|write|writeln))\\b"
        },


        {
            "name": "meta.function.prototype.delphi",
            "match": "\\b(?i:(function|procedure))\\b\\s+(\\w+(\\.\\w+)?)(\\(.*?\\))?;\\s*(?=(?i:attribute|forward|external))", 
            "captures": {
                "1": {
                    "name": "storage.type.prototype.delphi"
                }, 
                "2": {
                    "name": "entity.name.function.prototype.delphi"
                }
            },
            "patterns": [
                { "include": "#blockComments" }
            ]
        }, 

        {
            "name": "meta.function.delphi",
            "match": "\\b(?i:(function|procedure|program))\\b\\s+(\\w+(\\.\\w+)?)", 
            "captures": {
                "1": {
                    "name": "storage.type.function.delphi"
                }, 
                "2": {
                    "name": "entity.name.function.delphi"
                }
            }
        }, 
        {
            "name": "meta.function.delphi",
            "match": "\\b(?i:(Shortint|Integer|Longint|Byte|Word|Boolean|WordBool|LongBool|ByteBool|Real|Single|Double|Extended|Comp|String|Char|Length|Upcase|textbackground|textcolor|gotoxy|crt|clrscr|readkey|read|readln))\\b", 
            "captures": {
                "1": {
                    "name": "storage.type.function.delphi"
                }, 
                "2": {
                    "name": "entity.name.function.delphi"
                }
            }
        }, 
        {
            "name": "constant.numeric.delphi",
            "match": "(?<![#])\\s((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
        },
        {
            "name": "string.character.delphi",
            "match": "\\W#((0(x|X)[0-9a-fA-F]*)|([0-9]+))\\W"
        }

    ], 

    "scopeName": "source.delphi", 
    "uuid": "533ce636-d422-4e96-b363-f6a710dbb1a3"
}